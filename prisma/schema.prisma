generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  BARBER
}

model User {
  id            String      @id @default(cuid())
  name          String?
  email         String      @unique
  emailVerified DateTime?
  image         String?
  role          Role        @default(USER)
  barbershop    Barbershop?
  accounts      Account[]
  sessions      Session[]
  bookings      Booking[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model Barbershop {
  id                      String                   @id @default(uuid())
  userId                  String                   @unique
  name                    String
  address                 String
  phones                  String[]
  description             String
  imageUrl                String
  user                    User                     @relation(fields: [userId], references: [id], onDelete: NoAction)
  services                BarbershopService[]
  barbershopAvailableDays BarbershopAvailableDay[]
  createdAt               DateTime                 @default(now())
  updatedAt               DateTime                 @updatedAt
}

model BarbershopAvailableDay {
  id                String     @id @default(uuid())
  availableDay      Int
  availableFromTime DateTime   @db.Time
  availableToTime   DateTime   @db.Time
  barbershopId      String
  barbershop        Barbershop @relation(fields: [barbershopId], references: [id])
  createdAt         DateTime   @default(now())
  updatedAt         DateTime   @updatedAt
}

model BarbershopService {
  id           String     @id @default(uuid())
  name         String
  description  String
  imageUrl     String
  priceInCents Int
  duration     Int
  barbershopId String
  barbershop   Barbershop @relation(fields: [barbershopId], references: [id])
  bookings     Booking[]
}

model Booking {
  id        String            @id @default(uuid())
  userId    String
  user      User              @relation(fields: [userId], references: [id])
  serviceId String
  service   BarbershopService @relation(fields: [serviceId], references: [id])
  date      DateTime
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt
}
